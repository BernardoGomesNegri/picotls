name: CI

on: [push, pull_request]

jobs:
  linux:
    name: "${{ matrix.name }}"
    runs-on: [ubuntu-20.04]

    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Linux / OpenSSL 1.1.1"
            command: make -f misc/docker-ci.mk
          - name: "Linux / OpenSSL 1.1.1 + ASan & UBSan"
            command: make -f misc/docker-ci.mk CMAKE_ENVS='CC=clang CXX=clang++ CFLAGS="-fsanitize=address,undefined" CXXFLAGS="-fsanitize=address,undefined" LDFLAGS="-fsanitize=address,undefined"' CHECK_ENVS="ASAN_OPTIONS=detect_leaks=0 UBSAN_OPTIONS=print_stacktrace=1"

    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Run with Docker
      shell: 'script -q -e -c "bash -xe {0}"'
      run: |
        chmod -R ugo+w .
        ${{ matrix.command }}
  macos:
    name: macOS / OpenSSL
    runs-on: [macos-latest]
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |
        brew install libfaketime openssl
        curl -L https://cpanmin.us | sudo perl - App::cpanminus
        cpanm --notest Scope::Guard Test::TCP

    - name: Configure
      working-directory: ${{runner.workspace}}/build
      run: cmake -DCMAKE_BUILD_TYPE=Debug -B. $GITHUB_WORKSPACE
    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: 	make -j4 all VERBOSE=1
    - name: Check
      working-directory: ${{runner.workspace}}/build
      run: 	make check
